eval("//# sourceURL=vendor/ember-cli/loader.js");

;eval("define(\"dummy/Ember CLI QUnit/tests/ember-cli-qunit/adapter.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-qunit\');\n    test(\'ember-cli-qunit/adapter.js should pass jshint\', function() { \n      ok(true, \'ember-cli-qunit/adapter.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/Ember CLI QUnit/tests/ember-cli-qunit/adapter.jshint.js");

;eval("define(\"dummy/Ember CLI QUnit/tests/ember-cli-qunit/adapters/ajax.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-qunit/adapters\');\n    test(\'ember-cli-qunit/adapters/ajax.js should pass jshint\', function() { \n      ok(true, \'ember-cli-qunit/adapters/ajax.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/Ember CLI QUnit/tests/ember-cli-qunit/adapters/ajax.jshint.js");

;eval("define(\"dummy/Ember CLI QUnit/tests/ember-cli-qunit/adapters/localstorage.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-qunit/adapters\');\n    test(\'ember-cli-qunit/adapters/localstorage.js should pass jshint\', function() { \n      ok(true, \'ember-cli-qunit/adapters/localstorage.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/Ember CLI QUnit/tests/ember-cli-qunit/adapters/localstorage.jshint.js");

;eval("define(\"dummy/Ember CLI QUnit/tests/ember-cli-qunit/cache.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-qunit\');\n    test(\'ember-cli-qunit/cache.js should pass jshint\', function() { \n      ok(true, \'ember-cli-qunit/cache.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/Ember CLI QUnit/tests/ember-cli-qunit/cache.jshint.js");

;eval("define(\"dummy/Ember CLI QUnit/tests/ember-cli-qunit/initializers/sl-ember-store.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-qunit/initializers\');\n    test(\'ember-cli-qunit/initializers/sl-ember-store.js should pass jshint\', function() { \n      ok(true, \'ember-cli-qunit/initializers/sl-ember-store.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/Ember CLI QUnit/tests/ember-cli-qunit/initializers/sl-ember-store.jshint.js");

;eval("define(\"dummy/Ember CLI QUnit/tests/ember-cli-qunit/model.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-qunit\');\n    test(\'ember-cli-qunit/model.js should pass jshint\', function() { \n      ok(true, \'ember-cli-qunit/model.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/Ember CLI QUnit/tests/ember-cli-qunit/model.jshint.js");

;eval("define(\"dummy/Ember CLI QUnit/tests/ember-cli-qunit/store.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-qunit\');\n    test(\'ember-cli-qunit/store.js should pass jshint\', function() { \n      ok(true, \'ember-cli-qunit/store.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/Ember CLI QUnit/tests/ember-cli-qunit/store.jshint.js");

;eval("define(\"dummy/app\", \n  [\"ember\",\"ember/resolver\",\"ember/load-initializers\",\"dummy/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Resolver = __dependency2__[\"default\"];\n    var loadInitializers = __dependency3__[\"default\"];\n    var config = __dependency4__[\"default\"];\n\n    Ember.MODEL_FACTORY_INJECTIONS = true;\n\n    var App = Ember.Application.extend({\n      modulePrefix: config.modulePrefix,\n      podModulePrefix: config.podModulePrefix,\n      Resolver: Resolver\n    });\n\n    loadInitializers(App, config.modulePrefix);\n\n    __exports__[\"default\"] = App;\n  });//# sourceURL=dummy/app.js");

;eval("define(\"dummy/ember-cli-pretender/tests/ember-cli-pretender/adapter.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-pretender\');\n    test(\'ember-cli-pretender/adapter.js should pass jshint\', function() { \n      ok(true, \'ember-cli-pretender/adapter.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-cli-pretender/tests/ember-cli-pretender/adapter.jshint.js");

;eval("define(\"dummy/ember-cli-pretender/tests/ember-cli-pretender/adapters/ajax.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-pretender/adapters\');\n    test(\'ember-cli-pretender/adapters/ajax.js should pass jshint\', function() { \n      ok(true, \'ember-cli-pretender/adapters/ajax.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-cli-pretender/tests/ember-cli-pretender/adapters/ajax.jshint.js");

;eval("define(\"dummy/ember-cli-pretender/tests/ember-cli-pretender/adapters/localstorage.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-pretender/adapters\');\n    test(\'ember-cli-pretender/adapters/localstorage.js should pass jshint\', function() { \n      ok(true, \'ember-cli-pretender/adapters/localstorage.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-cli-pretender/tests/ember-cli-pretender/adapters/localstorage.jshint.js");

;eval("define(\"dummy/ember-cli-pretender/tests/ember-cli-pretender/cache.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-pretender\');\n    test(\'ember-cli-pretender/cache.js should pass jshint\', function() { \n      ok(true, \'ember-cli-pretender/cache.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-cli-pretender/tests/ember-cli-pretender/cache.jshint.js");

;eval("define(\"dummy/ember-cli-pretender/tests/ember-cli-pretender/initializers/sl-ember-store.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-pretender/initializers\');\n    test(\'ember-cli-pretender/initializers/sl-ember-store.js should pass jshint\', function() { \n      ok(true, \'ember-cli-pretender/initializers/sl-ember-store.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-cli-pretender/tests/ember-cli-pretender/initializers/sl-ember-store.jshint.js");

;eval("define(\"dummy/ember-cli-pretender/tests/ember-cli-pretender/model.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-pretender\');\n    test(\'ember-cli-pretender/model.js should pass jshint\', function() { \n      ok(true, \'ember-cli-pretender/model.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-cli-pretender/tests/ember-cli-pretender/model.jshint.js");

;eval("define(\"dummy/ember-cli-pretender/tests/ember-cli-pretender/store.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-cli-pretender\');\n    test(\'ember-cli-pretender/store.js should pass jshint\', function() { \n      ok(true, \'ember-cli-pretender/store.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-cli-pretender/tests/ember-cli-pretender/store.jshint.js");

;eval("define(\"dummy/ember-export-application-global/tests/ember-export-application-global/adapter.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-export-application-global\');\n    test(\'ember-export-application-global/adapter.js should pass jshint\', function() { \n      ok(true, \'ember-export-application-global/adapter.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-export-application-global/tests/ember-export-application-global/adapter.jshint.js");

;eval("define(\"dummy/ember-export-application-global/tests/ember-export-application-global/adapters/ajax.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-export-application-global/adapters\');\n    test(\'ember-export-application-global/adapters/ajax.js should pass jshint\', function() { \n      ok(true, \'ember-export-application-global/adapters/ajax.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-export-application-global/tests/ember-export-application-global/adapters/ajax.jshint.js");

;eval("define(\"dummy/ember-export-application-global/tests/ember-export-application-global/adapters/localstorage.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-export-application-global/adapters\');\n    test(\'ember-export-application-global/adapters/localstorage.js should pass jshint\', function() { \n      ok(true, \'ember-export-application-global/adapters/localstorage.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-export-application-global/tests/ember-export-application-global/adapters/localstorage.jshint.js");

;eval("define(\"dummy/ember-export-application-global/tests/ember-export-application-global/cache.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-export-application-global\');\n    test(\'ember-export-application-global/cache.js should pass jshint\', function() { \n      ok(true, \'ember-export-application-global/cache.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-export-application-global/tests/ember-export-application-global/cache.jshint.js");

;eval("define(\"dummy/ember-export-application-global/tests/ember-export-application-global/initializers/sl-ember-store.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-export-application-global/initializers\');\n    test(\'ember-export-application-global/initializers/sl-ember-store.js should pass jshint\', function() { \n      ok(true, \'ember-export-application-global/initializers/sl-ember-store.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-export-application-global/tests/ember-export-application-global/initializers/sl-ember-store.jshint.js");

;eval("define(\"dummy/ember-export-application-global/tests/ember-export-application-global/model.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-export-application-global\');\n    test(\'ember-export-application-global/model.js should pass jshint\', function() { \n      ok(true, \'ember-export-application-global/model.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-export-application-global/tests/ember-export-application-global/model.jshint.js");

;eval("define(\"dummy/ember-export-application-global/tests/ember-export-application-global/store.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - ember-export-application-global\');\n    test(\'ember-export-application-global/store.js should pass jshint\', function() { \n      ok(true, \'ember-export-application-global/store.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/ember-export-application-global/tests/ember-export-application-global/store.jshint.js");

;eval("define(\"dummy/initializers/export-application-global\", \n  [\"ember\",\"dummy/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var config = __dependency2__[\"default\"];\n\n    function initialize(container, application) {\n      var classifiedName = Ember.String.classify(config.modulePrefix);\n\n      if (config.exportApplicationGlobal) {\n        window[classifiedName] = application;\n      }\n    };\n    __exports__.initialize = initialize;\n    __exports__[\"default\"] = {\n      name: \'export-application-global\',\n\n      initialize: initialize\n    };\n  });//# sourceURL=dummy/initializers/export-application-global.js");

;eval("define(\"dummy/initializers/pretender\", \n  [\"pretender\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Pretender = __dependency1__[\"default\"];\n\n    var fooRecords = [\n        {\n            id: 1,\n            text: \'This is foo record with id: 1\',\n            bar: {\n                id: 1,\n                text: \'This is a bar record with id: 1\'\n            }\n        },\n        {\n            id: 2,\n            text: \'This is foo record #2\',\n            bar: {\n                id: 2,\n                text: \'This is a bar record with id: 2\'\n            }\n\n        },\n        {\n            id: 3,\n            text: \'This is foo record #3\',\n            bar: {\n                id: 3,\n                text: \'This is a bar record with id: 3\'\n            }\n\n        }\n    ];\n\n    function initialize(/* container, application */) {\n        new Pretender(function(){\n            this.get( \'/foo\', function(request){\n                var id = request.queryParams.id && ( parseInt( request.queryParams.id ) - 1 );\n\n                if( request.queryParams.id ){\n                    return [\n                        200,\n                        { \"Content-Type\":\"application/json\" },\n                        JSON.stringify( fooRecords[ id ] )\n                    ];\n                }\n\n                return [\n                    200,\n                    { \"Content-Type\":\"application/json\" },\n                    JSON.stringify( fooRecords )\n                ];\n                });\n        });\n    }\n\n    __exports__.initialize = initialize;__exports__[\"default\"] = {\n      name: \'pretender\',\n      after: \'sl-ember-store\',\n      initialize: initialize\n    };\n  });//# sourceURL=dummy/initializers/pretender.js");

;eval("define(\"dummy/initializers/sl-ember-store\", \n  [\"sl-ember-store/initializers/sl-ember-store\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var initializer = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = {\n\n        name: \'sl-ember-store\',\n\n        initialize: initializer\n    };\n  });//# sourceURL=dummy/initializers/sl-ember-store.js");

;eval("define(\"dummy/live-reload-middleware/tests/live-reload-middleware/adapter.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - live-reload-middleware\');\n    test(\'live-reload-middleware/adapter.js should pass jshint\', function() { \n      ok(true, \'live-reload-middleware/adapter.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/live-reload-middleware/tests/live-reload-middleware/adapter.jshint.js");

;eval("define(\"dummy/live-reload-middleware/tests/live-reload-middleware/adapters/ajax.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - live-reload-middleware/adapters\');\n    test(\'live-reload-middleware/adapters/ajax.js should pass jshint\', function() { \n      ok(true, \'live-reload-middleware/adapters/ajax.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/live-reload-middleware/tests/live-reload-middleware/adapters/ajax.jshint.js");

;eval("define(\"dummy/live-reload-middleware/tests/live-reload-middleware/adapters/localstorage.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - live-reload-middleware/adapters\');\n    test(\'live-reload-middleware/adapters/localstorage.js should pass jshint\', function() { \n      ok(true, \'live-reload-middleware/adapters/localstorage.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/live-reload-middleware/tests/live-reload-middleware/adapters/localstorage.jshint.js");

;eval("define(\"dummy/live-reload-middleware/tests/live-reload-middleware/cache.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - live-reload-middleware\');\n    test(\'live-reload-middleware/cache.js should pass jshint\', function() { \n      ok(true, \'live-reload-middleware/cache.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/live-reload-middleware/tests/live-reload-middleware/cache.jshint.js");

;eval("define(\"dummy/live-reload-middleware/tests/live-reload-middleware/initializers/sl-ember-store.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - live-reload-middleware/initializers\');\n    test(\'live-reload-middleware/initializers/sl-ember-store.js should pass jshint\', function() { \n      ok(true, \'live-reload-middleware/initializers/sl-ember-store.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/live-reload-middleware/tests/live-reload-middleware/initializers/sl-ember-store.jshint.js");

;eval("define(\"dummy/live-reload-middleware/tests/live-reload-middleware/model.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - live-reload-middleware\');\n    test(\'live-reload-middleware/model.js should pass jshint\', function() { \n      ok(true, \'live-reload-middleware/model.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/live-reload-middleware/tests/live-reload-middleware/model.jshint.js");

;eval("define(\"dummy/live-reload-middleware/tests/live-reload-middleware/store.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - live-reload-middleware\');\n    test(\'live-reload-middleware/store.js should pass jshint\', function() { \n      ok(true, \'live-reload-middleware/store.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/live-reload-middleware/tests/live-reload-middleware/store.jshint.js");

;eval("define(\"dummy/models/bar\", \n  [\"sl-ember-store/model\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Model = __dependency1__[\"default\"];\n\n    var Bar = Model.extend({\n    });\n\n\n    __exports__[\"default\"] = Bar;\n  });//# sourceURL=dummy/models/bar.js");

;eval("define(\"dummy/models/car\", \n  [\"sl-ember-store/model\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Model = __dependency1__[\"default\"];\n\n    var Car = Model.extend({\n    });\n\n    Car.reopenClass({\n        url: \'/api/car\',\n        serializer: function( result ){\n            return result.car;\n        }\n    });\n\n    __exports__[\"default\"] = Car;\n  });//# sourceURL=dummy/models/car.js");

;eval("define(\"dummy/models/foo\", \n  [\"sl-ember-store/model\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Model = __dependency1__[\"default\"];\n\n    var Foo = Model.extend({\n    });\n\n    Foo.reopenClass({\n        url: \'/foo\'\n    });\n\n    __exports__[\"default\"] = Foo;\n  });//# sourceURL=dummy/models/foo.js");

;eval("define(\"dummy/router\", \n  [\"ember\",\"dummy/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var config = __dependency2__[\"default\"];\n\n    var Router = Ember.Router.extend({\n      location: config.locationType\n    });\n\n    Router.map(function() {\n        this.route( \'singleModel\', { path: \'/singleModel/:model_id\' } );\n        this.route( \'arrayOfModels\', { path: \'/arrayOfModels\' } ); \n    });\n\n    __exports__[\"default\"] = Router;\n  });//# sourceURL=dummy/router.js");

;eval("define(\"dummy/routes/application\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Route.extend({\n    });\n  });//# sourceURL=dummy/routes/application.js");

;eval("define(\"dummy/routes/array-of-models\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Route.extend({\n        model: function( ){\n            return this.store.find( \'foo\' );\n        }\n    });\n  });//# sourceURL=dummy/routes/array-of-models.js");

;eval("define(\"dummy/routes/single-model\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Route.extend({\n        model: function( params ){\n            return this.store.find( \'foo\', params.model_id );\n        }\n    });\n  });//# sourceURL=dummy/routes/single-model.js");

;eval("define(\"dummy/sl-ember-modelize/tests/sl-ember-modelize/adapter.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - sl-ember-modelize\');\n    test(\'sl-ember-modelize/adapter.js should pass jshint\', function() { \n      ok(true, \'sl-ember-modelize/adapter.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/sl-ember-modelize/tests/sl-ember-modelize/adapter.jshint.js");

;eval("define(\"dummy/sl-ember-modelize/tests/sl-ember-modelize/adapters/ajax.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - sl-ember-modelize/adapters\');\n    test(\'sl-ember-modelize/adapters/ajax.js should pass jshint\', function() { \n      ok(true, \'sl-ember-modelize/adapters/ajax.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/sl-ember-modelize/tests/sl-ember-modelize/adapters/ajax.jshint.js");

;eval("define(\"dummy/sl-ember-modelize/tests/sl-ember-modelize/adapters/localstorage.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - sl-ember-modelize/adapters\');\n    test(\'sl-ember-modelize/adapters/localstorage.js should pass jshint\', function() { \n      ok(true, \'sl-ember-modelize/adapters/localstorage.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/sl-ember-modelize/tests/sl-ember-modelize/adapters/localstorage.jshint.js");

;eval("define(\"dummy/sl-ember-modelize/tests/sl-ember-modelize/cache.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - sl-ember-modelize\');\n    test(\'sl-ember-modelize/cache.js should pass jshint\', function() { \n      ok(true, \'sl-ember-modelize/cache.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/sl-ember-modelize/tests/sl-ember-modelize/cache.jshint.js");

;eval("define(\"dummy/sl-ember-modelize/tests/sl-ember-modelize/initializers/sl-ember-store.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - sl-ember-modelize/initializers\');\n    test(\'sl-ember-modelize/initializers/sl-ember-store.js should pass jshint\', function() { \n      ok(true, \'sl-ember-modelize/initializers/sl-ember-store.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/sl-ember-modelize/tests/sl-ember-modelize/initializers/sl-ember-store.jshint.js");

;eval("define(\"dummy/sl-ember-modelize/tests/sl-ember-modelize/model.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - sl-ember-modelize\');\n    test(\'sl-ember-modelize/model.js should pass jshint\', function() { \n      ok(true, \'sl-ember-modelize/model.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/sl-ember-modelize/tests/sl-ember-modelize/model.jshint.js");

;eval("define(\"dummy/sl-ember-modelize/tests/sl-ember-modelize/store.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - sl-ember-modelize\');\n    test(\'sl-ember-modelize/store.js should pass jshint\', function() { \n      ok(true, \'sl-ember-modelize/store.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/sl-ember-modelize/tests/sl-ember-modelize/store.jshint.js");

;eval("define(\"dummy/sl-ember-store/tests/sl-ember-store/adapter.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - sl-ember-store\');\n    test(\'sl-ember-store/adapter.js should pass jshint\', function() { \n      ok(true, \'sl-ember-store/adapter.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/sl-ember-store/tests/sl-ember-store/adapter.jshint.js");

;eval("define(\"dummy/sl-ember-store/tests/sl-ember-store/adapters/ajax.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - sl-ember-store/adapters\');\n    test(\'sl-ember-store/adapters/ajax.js should pass jshint\', function() { \n      ok(true, \'sl-ember-store/adapters/ajax.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/sl-ember-store/tests/sl-ember-store/adapters/ajax.jshint.js");

;eval("define(\"dummy/sl-ember-store/tests/sl-ember-store/adapters/localstorage.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - sl-ember-store/adapters\');\n    test(\'sl-ember-store/adapters/localstorage.js should pass jshint\', function() { \n      ok(true, \'sl-ember-store/adapters/localstorage.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/sl-ember-store/tests/sl-ember-store/adapters/localstorage.jshint.js");

;eval("define(\"dummy/sl-ember-store/tests/sl-ember-store/cache.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - sl-ember-store\');\n    test(\'sl-ember-store/cache.js should pass jshint\', function() { \n      ok(true, \'sl-ember-store/cache.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/sl-ember-store/tests/sl-ember-store/cache.jshint.js");

;eval("define(\"dummy/sl-ember-store/tests/sl-ember-store/initializers/sl-ember-store.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - sl-ember-store/initializers\');\n    test(\'sl-ember-store/initializers/sl-ember-store.js should pass jshint\', function() { \n      ok(true, \'sl-ember-store/initializers/sl-ember-store.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/sl-ember-store/tests/sl-ember-store/initializers/sl-ember-store.jshint.js");

;eval("define(\"dummy/sl-ember-store/tests/sl-ember-store/model.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - sl-ember-store\');\n    test(\'sl-ember-store/model.js should pass jshint\', function() { \n      ok(true, \'sl-ember-store/model.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/sl-ember-store/tests/sl-ember-store/model.jshint.js");

;eval("define(\"dummy/sl-ember-store/tests/sl-ember-store/store.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - sl-ember-store\');\n    test(\'sl-ember-store/store.js should pass jshint\', function() { \n      ok(true, \'sl-ember-store/store.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/sl-ember-store/tests/sl-ember-store/store.jshint.js");

;eval("define(\"dummy/templates/application\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1, helper, options, self=this, helperMissing=helpers.helperMissing;\n\n    function program1(depth0,data) {\n      \n      \n      data.buffer.push(\"sl-ember-store\");\n      }\n\n      data.buffer.push(\"<h1 id=\'title\'>Welcome to \");\n      stack1 = (helper = helpers[\'link-to\'] || (depth0 && depth0[\'link-to\']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:[\"STRING\"],data:data},helper ? helper.call(depth0, \"index\", options) : helperMissing.call(depth0, \"link-to\", \"index\", options));\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"!</h1>\\n\\n\");\n      stack1 = helpers._triageMustache.call(depth0, \"outlet\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n\");\n      return buffer;\n      \n    });\n  });//# sourceURL=dummy/templates/application.js");

;eval("define(\"dummy/templates/array-of-models\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1, self=this, helperMissing=helpers.helperMissing;\n\n    function program1(depth0,data) {\n      \n      var buffer = \'\', stack1, helper, options;\n      data.buffer.push(\"\\n<h3>Foo Model</h3>\\n<ul>\\n    <li>ID: \");\n      stack1 = (helper = helpers[\'link-to\'] || (depth0 && depth0[\'link-to\']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(2, program2, data),contexts:[depth0,depth0],types:[\"STRING\",\"ID\"],data:data},helper ? helper.call(depth0, \"singleModel\", \"model.id\", options) : helperMissing.call(depth0, \"link-to\", \"singleModel\", \"model.id\", options));\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</li>\\n    <li>Text: \");\n      stack1 = helpers._triageMustache.call(depth0, \"model.text\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</li>\\n    <ul>\\n        <h3>Bar Model</h3>\\n        <li>ID: \");\n      stack1 = helpers._triageMustache.call(depth0, \"model.bar.id\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</li>\\n        <li>Text: \");\n      stack1 = helpers._triageMustache.call(depth0, \"model.bar.text\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</li>\\n    </ul>\\n</ul>\\n\\n\");\n      return buffer;\n      }\n    function program2(depth0,data) {\n      \n      var stack1;\n      stack1 = helpers._triageMustache.call(depth0, \"model.id\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      else { data.buffer.push(\'\'); }\n      }\n\n      data.buffer.push(\"<h2>Array of Models</h2>\\n<p>These records are loaded in our route\'s model hook with the following code:</p>\\n<code>this.store.find(\'foo\');</code>\\n<p>These records are loaded by the store via the ajax adapter.  The `/foo` \\nresource contains foo records with embedded `bar` records.  These records are automatically \\ncreated as an instance of the `Bar` model.</p>\\n\\n\");\n      stack1 = helpers.each.call(depth0, \"model\", \"in\", \"controller\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0,depth0,depth0],types:[\"ID\",\"ID\",\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n\");\n      return buffer;\n      \n    });\n  });//# sourceURL=dummy/templates/array-of-models.js");

;eval("define(\"dummy/templates/index\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1, helper, options, self=this, helperMissing=helpers.helperMissing;\n\n    function program1(depth0,data) {\n      \n      \n      data.buffer.push(\"route\");\n      }\n\n      data.buffer.push(\"<p>sl-ember-store is a Simple, Low level, Model layer for <a href=\\\"http://emberjs.com\\\">Ember.js</a>. </p>\\n<p>It\'s easy to install via <a href=\\\"http://ember-cli.com\\\">ember-cli</a>.</p>\\n\\n<p>Example of a single model \");\n      stack1 = (helper = helpers[\'link-to\'] || (depth0 && depth0[\'link-to\']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0,depth0],types:[\"STRING\",\"INTEGER\"],data:data},helper ? helper.call(depth0, \"singleModel\", 1, options) : helperMissing.call(depth0, \"link-to\", \"singleModel\", 1, options));\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</p>\\n<p>Example of an array of models \");\n      stack1 = (helper = helpers[\'link-to\'] || (depth0 && depth0[\'link-to\']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:[\"STRING\"],data:data},helper ? helper.call(depth0, \"arrayOfModels\", options) : helperMissing.call(depth0, \"link-to\", \"arrayOfModels\", options));\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</p>\\n\");\n      return buffer;\n      \n    });\n  });//# sourceURL=dummy/templates/index.js");

;eval("define(\"dummy/templates/single-model\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1, helper, options, self=this, helperMissing=helpers.helperMissing;\n\n    function program1(depth0,data) {\n      \n      \n      data.buffer.push(\"All Records\");\n      }\n\n      data.buffer.push(\"<h2>Single Model</h2>\\n<p>This record is loaded in our route\'s model hook with the following code:</p>\\n<code>this.store.find( \'foo\', params.model_id );</code>\\n<p>The model is loaded by the store via the ajax adapter.  The `/foo?id=1` \\nresource contains an embedded `bar` record, and this record is automatically \\ncreated as an instance of the `Bar` model.</p>\\n<h3>Foo Model</h3>\\n<ul>\\n    <li>ID: \");\n      stack1 = helpers._triageMustache.call(depth0, \"model.id\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</li>\\n    <li>Text: \");\n      stack1 = helpers._triageMustache.call(depth0, \"model.text\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</li>\\n    <ul>\\n        <h3>Bar Model</h3>\\n        <li>ID: \");\n      stack1 = helpers._triageMustache.call(depth0, \"model.bar.id\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</li>\\n        <li>Text: \");\n      stack1 = helpers._triageMustache.call(depth0, \"model.bar.text\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</li>\\n    </ul>\\n</ul>\\n<p>The original json string for this resource:</p>\\n<pre>\\n{\\n    id: 1,\\n    text: \'This is foo record with id: 1\',\\n    bar: {\\n        id: 1,\\n        text: \'This is a bar record with id: 1\'\\n    }\\n}\\n</pre>\\n\\n<p>\");\n      stack1 = (helper = helpers[\'link-to\'] || (depth0 && depth0[\'link-to\']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:[\"STRING\"],data:data},helper ? helper.call(depth0, \"arrayOfModels\", options) : helperMissing.call(depth0, \"link-to\", \"arrayOfModels\", options));\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</p>\\n\");\n      return buffer;\n      \n    });\n  });//# sourceURL=dummy/templates/single-model.js");

;eval("define(\"dummy/tests/acceptance/array-of-models-test\", \n  [\"ember\",\"dummy/tests/helpers/start-app\",\"dummy/models/foo\",\"ember-qunit\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var startApp = __dependency2__[\"default\"];\n    var Foo = __dependency3__[\"default\"];\n    var test = __dependency4__.test;\n    var moduleFor = __dependency4__.moduleFor;\n\n    var App;\n\n    module(\'Acceptance: ArrayOfModels\', {\n      setup: function() {\n        App = startApp();\n      },\n      teardown: function() {\n        Ember.run(App, \'destroy\');\n      }\n    });\n\n    test(\'visiting /arrayOfModels\', function() {\n      visit(\'/arrayOfModels\');\n\n      andThen(function() {\n        var arrayModelController = App.__container__.lookup(\'controller:arrayOfModels\');\n        equal(currentPath(), \'arrayOfModels\');\n        ok( arrayModelController.get(\'model.0\') instanceof Foo, \'Controllers model is instance of Foo\' ); \n     \n      });\n    });\n  });//# sourceURL=dummy/tests/acceptance/array-of-models-test.js");

;eval("define(\"dummy/tests/helpers/start-app\", \n  [\"ember\",\"dummy/app\",\"dummy/router\",\"dummy/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Application = __dependency2__[\"default\"];\n    var Router = __dependency3__[\"default\"];\n    var config = __dependency4__[\"default\"];\n\n    __exports__[\"default\"] = function startApp(attrs) {\n      var App;\n\n      var attributes = Ember.merge({}, config.APP);\n      attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;\n\n      Ember.run(function() {\n        App = Application.create(attributes);\n        App.setupForTesting();\n        App.injectTestHelpers();\n      });\n\n      return App;\n    }\n  });//# sourceURL=dummy/tests/helpers/start-app.js");

;eval("define(\"dummy/tests/acceptance/single-model-test\", \n  [\"ember\",\"dummy/tests/helpers/start-app\",\"dummy/models/foo\",\"ember-qunit\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var startApp = __dependency2__[\"default\"];\n    var Foo = __dependency3__[\"default\"];\n    var test = __dependency4__.test;\n    var moduleFor = __dependency4__.moduleFor;\n\n    var App;\n\n    module( \'Acceptance: SingleModel\', {\n      setup: function() {\n        App = startApp();\n      },\n      teardown: function() {\n        Ember.run(App, \'destroy\');\n      }\n    });\n\n    test(\'visiting /singleModel\', function() {\n      visit(\'/singleModel/1\');\n\n      andThen(function() {\n        var singleModelController = App.__container__.lookup(\'controller:singleModel\');\n        equal(currentPath(), \'singleModel\');\n        ok( singleModelController.get(\'model\') instanceof Foo, \'Controllers model is instance of Foo\' ); \n      });\n    });\n  });//# sourceURL=dummy/tests/acceptance/single-model-test.js");

;eval("define(\"dummy/tests/app.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - .\');\n    test(\'app.js should pass jshint\', function() { \n      ok(true, \'app.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/app.jshint.js");

;eval("define(\"dummy/tests/dummy/tests/acceptance/array-of-models-test.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - dummy/tests/acceptance\');\n    test(\'dummy/tests/acceptance/array-of-models-test.js should pass jshint\', function() { \n      ok(true, \'dummy/tests/acceptance/array-of-models-test.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/dummy/tests/acceptance/array-of-models-test.jshint.js");

;eval("define(\"dummy/tests/dummy/tests/acceptance/single-model-test.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - dummy/tests/acceptance\');\n    test(\'dummy/tests/acceptance/single-model-test.js should pass jshint\', function() { \n      ok(true, \'dummy/tests/acceptance/single-model-test.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/dummy/tests/acceptance/single-model-test.jshint.js");

;eval("define(\"dummy/tests/dummy/tests/helpers/module-for-sl-ember-model.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - dummy/tests/helpers\');\n    test(\'dummy/tests/helpers/module-for-sl-ember-model.js should pass jshint\', function() { \n      ok(true, \'dummy/tests/helpers/module-for-sl-ember-model.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/dummy/tests/helpers/module-for-sl-ember-model.jshint.js");

;eval("define(\"dummy/tests/dummy/tests/helpers/resolver.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - dummy/tests/helpers\');\n    test(\'dummy/tests/helpers/resolver.js should pass jshint\', function() { \n      ok(true, \'dummy/tests/helpers/resolver.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/dummy/tests/helpers/resolver.jshint.js");

;eval("define(\"dummy/tests/dummy/tests/helpers/start-app.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - dummy/tests/helpers\');\n    test(\'dummy/tests/helpers/start-app.js should pass jshint\', function() { \n      ok(true, \'dummy/tests/helpers/start-app.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/dummy/tests/helpers/start-app.jshint.js");

;eval("define(\"dummy/tests/dummy/tests/test-helper.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - dummy/tests\');\n    test(\'dummy/tests/test-helper.js should pass jshint\', function() { \n      ok(true, \'dummy/tests/test-helper.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/dummy/tests/test-helper.jshint.js");

;eval("define(\"dummy/tests/dummy/tests/unit/adapters-test.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - dummy/tests/unit\');\n    test(\'dummy/tests/unit/adapters-test.js should pass jshint\', function() { \n      ok(true, \'dummy/tests/unit/adapters-test.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/dummy/tests/unit/adapters-test.jshint.js");

;eval("define(\"dummy/tests/dummy/tests/unit/adapters/ajax-test.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - dummy/tests/unit/adapters\');\n    test(\'dummy/tests/unit/adapters/ajax-test.js should pass jshint\', function() { \n      ok(true, \'dummy/tests/unit/adapters/ajax-test.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/dummy/tests/unit/adapters/ajax-test.jshint.js");

;eval("define(\"dummy/tests/dummy/tests/unit/adapters/localstorage-test.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - dummy/tests/unit/adapters\');\n    test(\'dummy/tests/unit/adapters/localstorage-test.js should pass jshint\', function() { \n      ok(true, \'dummy/tests/unit/adapters/localstorage-test.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/dummy/tests/unit/adapters/localstorage-test.jshint.js");

;eval("define(\"dummy/tests/dummy/tests/unit/cache-test.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - dummy/tests/unit\');\n    test(\'dummy/tests/unit/cache-test.js should pass jshint\', function() { \n      ok(true, \'dummy/tests/unit/cache-test.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/dummy/tests/unit/cache-test.jshint.js");

;eval("define(\"dummy/tests/dummy/tests/unit/initializers/sl-ember-model-test.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - dummy/tests/unit/initializers\');\n    test(\'dummy/tests/unit/initializers/sl-ember-model-test.js should pass jshint\', function() { \n      ok(true, \'dummy/tests/unit/initializers/sl-ember-model-test.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/dummy/tests/unit/initializers/sl-ember-model-test.jshint.js");

;eval("define(\"dummy/tests/dummy/tests/unit/model-test.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - dummy/tests/unit\');\n    test(\'dummy/tests/unit/model-test.js should pass jshint\', function() { \n      ok(true, \'dummy/tests/unit/model-test.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/dummy/tests/unit/model-test.jshint.js");

;eval("define(\"dummy/tests/dummy/tests/unit/store-test.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - dummy/tests/unit\');\n    test(\'dummy/tests/unit/store-test.js should pass jshint\', function() { \n      ok(true, \'dummy/tests/unit/store-test.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/dummy/tests/unit/store-test.jshint.js");

;eval("define(\"dummy/tests/helpers/module-for-sl-ember-model\", \n  [\"ember-qunit\",\"ember\",\"sl-ember-store/store\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var moduleFor = __dependency1__.moduleFor;\n    var Ember = __dependency2__[\"default\"];\n    var Store = __dependency3__[\"default\"];\n\n\n    __exports__[\"default\"] = function moduleForSlEmberModel(name, description, callbacks) {\n\n        moduleFor(\'model:\' + name, description, callbacks, function(container, context, defaultSubject) {\n\n            container.register(\'store:main\', Store );\n\n            context.__setup_properties__.store = function(){\n                return container.lookup(\'store:main\');\n            };\n\n            if (context.__setup_properties__.subject === defaultSubject) {\n                context.__setup_properties__.subject = function(options) {\n                    return Ember.run(function() {\n                        return container.lookup(\'store:main\').createRecord(name, options);\n                    });\n                };\n            }\n        });\n    }\n  });//# sourceURL=dummy/tests/helpers/module-for-sl-ember-model.js");

;eval("define(\"dummy/tests/helpers/resolver\", \n  [\"ember/resolver\",\"dummy/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Resolver = __dependency1__[\"default\"];\n    var config = __dependency2__[\"default\"];\n\n    var resolver = Resolver.create();\n\n    resolver.namespace = {\n      modulePrefix: config.modulePrefix,\n      podModulePrefix: config.podModulePrefix\n    };\n\n    __exports__[\"default\"] = resolver;\n  });//# sourceURL=dummy/tests/helpers/resolver.js");

;eval("define(\"dummy/tests/initializers/pretender.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - initializers\');\n    test(\'initializers/pretender.js should pass jshint\', function() { \n      ok(true, \'initializers/pretender.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/initializers/pretender.jshint.js");

;eval("define(\"dummy/tests/models/bar.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - models\');\n    test(\'models/bar.js should pass jshint\', function() { \n      ok(true, \'models/bar.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/models/bar.jshint.js");

;eval("define(\"dummy/tests/models/car.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - models\');\n    test(\'models/car.js should pass jshint\', function() { \n      ok(true, \'models/car.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/models/car.jshint.js");

;eval("define(\"dummy/tests/models/foo.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - models\');\n    test(\'models/foo.js should pass jshint\', function() { \n      ok(true, \'models/foo.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/models/foo.jshint.js");

;eval("define(\"dummy/tests/router.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - .\');\n    test(\'router.js should pass jshint\', function() { \n      ok(true, \'router.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/router.jshint.js");

;eval("define(\"dummy/tests/routes/application.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - routes\');\n    test(\'routes/application.js should pass jshint\', function() { \n      ok(true, \'routes/application.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/routes/application.jshint.js");

;eval("define(\"dummy/tests/routes/array-of-models.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - routes\');\n    test(\'routes/array-of-models.js should pass jshint\', function() { \n      ok(true, \'routes/array-of-models.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/routes/array-of-models.jshint.js");

;eval("define(\"dummy/tests/routes/single-model.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - routes\');\n    test(\'routes/single-model.js should pass jshint\', function() { \n      ok(true, \'routes/single-model.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/routes/single-model.jshint.js");

;eval("define(\"dummy/tests/test-helper\", \n  [\"dummy/tests/helpers/resolver\",\"ember-qunit\"],\n  function(__dependency1__, __dependency2__) {\n    \"use strict\";\n    var resolver = __dependency1__[\"default\"];\n    var setResolver = __dependency2__.setResolver;\n\n    setResolver(resolver);\n\n    document.write(\'<div id=\"ember-testing-container\"><div id=\"ember-testing\"></div></div>\');\n\n    QUnit.config.urlConfig.push({ id: \'nocontainer\', label: \'Hide container\'});\n    var containerVisibility = QUnit.urlParams.nocontainer ? \'hidden\' : \'visible\';\n    document.getElementById(\'ember-testing-container\').style.visibility = containerVisibility;\n  });//# sourceURL=dummy/tests/test-helper.js");

;eval("define(\"dummy/tests/unit/adapters-test\", \n  [\"ember\",\"ember-qunit\",\"sl-ember-store/adapter\"],\n  function(__dependency1__, __dependency2__, __dependency3__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var test = __dependency2__.test;\n    var moduleFor = __dependency2__.moduleFor;\n    var Adapter = __dependency3__[\"default\"];\n\n    var adapter,\n        store = {\n            runPostQueryHooks: sinon.spy(),\n            runPreQueryHooks: sinon.spy()\n        };\n\n    module( \'Unit - sl-ember-store/adapter\', {\n        setup: function() {\n            adapter = Adapter.create({\n                container:{\n                    lookup: function( type ){\n                        if( type === \'store:main\' )\n                            return store;\n                        else\n                            Ember.Assert( \'Container could not find \"\'+type+\'\"\', false);\n                    }\n                }\n            });\n        },\n        teardown: function() {\n            store.runPostQueryHooks.reset();\n            store.runPreQueryHooks.reset();\n        }\n    });\n    test( \'runPreQueryHooks should run the prequeryhook once\', function() {\n        adapter.runPreQueryHooks();\n        ok( store.runPreQueryHooks.calledOnce );\n    });\n\n    test( \'runPreQueryHooks should not have run postqueryhook\', function() {\n        adapter.runPreQueryHooks();\n        equal( store.runPostQueryHooks.callCount,0 );\n    });\n\n    test( \'runPostQueryHooks should run the postqueryhook once\', function() {\n         adapter.runPostQueryHooks();\n         ok( store.runPostQueryHooks.calledOnce );\n    });\n    test( \'runPostQueryHooks should not have run the prequeryhook\', function() {\n         adapter.runPostQueryHooks();\n         equal( store.runPreQueryHooks.callCount,0 );\n    });\n  });//# sourceURL=dummy/tests/unit/adapters-test.js");

;eval("define(\"dummy/tests/unit/adapters/ajax-test\", \n  [\"ember\",\"ember-qunit\",\"sl-ember-store/model\",\"sl-ember-store/adapter\",\"sl-ember-store/store\",\"sl-ember-store/adapters/ajax\",\"ic-ajax\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var test = __dependency2__.test;\n    var moduleFor = __dependency2__.moduleFor;\n    var Model = __dependency3__[\"default\"];\n    var Adapter = __dependency4__[\"default\"];\n    var Store = __dependency5__[\"default\"];\n    var Ajaxadapter = __dependency6__[\"default\"];\n    var icAjax = __dependency7__;\n\n    var ajaxadapter,\n        Foo = Model.extend(),\n        Bar = Model.extend(),\n        defineFixture = icAjax.defineFixture,\n        response,\n        requestSpy;\n\n    module( \'Unit - sl-ember-store/adapter/ajax\', {\n        setup: function() {\n            var container = {\n                    registry: [],\n                    cache: {},\n                    normalize: function( key ){\n                        return key;\n                    },\n                    lookup: function( key ){\n                        if( this.cache[key] ) return this.cache[key];\n\n                        var obj = this.registry.findBy( \'key\', key ).factory.create({container:this});\n                        this.cache[key] = obj;\n                        return obj;\n                    },\n                    lookupFactory: function( key ){\n                        var item = this.registry.findBy( \'key\', key );\n                        return item ? item.factory : undefined;\n                    }\n                };\n\n            ajaxadapter = Ajaxadapter.create({\n                container: container,\n                store: Store.create({ container:container })\n            });\n            //register mock data\n            ajaxadapter.container.cache[\'store:main\']={\n                runPostQueryHooks: sinon.spy(),\n                runPreQueryHooks: sinon.spy()\n            };\n\n            ajaxadapter.container.registry.push( { key: \'model:foo\', factory: Foo } );\n            ajaxadapter.container.registry.push( { key: \'model:bar\', factory: Bar } );\n\n            defineFixture( \'/foo\', {\n                response: { id: 1, test: \'foo\', \'bar\': { id: 1, quiz: \'bar\' } },\n                jqXHR: {},\n                textStatus: \'success\'\n            });\n            defineFixture( \'/fooFail\', {\n                errorThrown: \'this is an error msg\',\n                jqXHR: {},\n                textStatus: \'error\'\n            });\n            defineFixture( \'/bar\', {\n                response:  [ { id: 1, quiz: \'bar\' }, { id: 2, quiz: \'bar2\' } ],\n                jqXHR: {},\n                textStatus: \'success\'\n            });\n            Foo.reopenClass( {\n                url: \'/foo\',\n                endpoints: {\n                    fail: {\n                        url: \'/fooFail\'\n                    }\n                }\n            });\n\n            Bar.reopenClass( { url: \'/bar\'});\n\n            //spies\n            requestSpy = sinon.spy( icAjax, \'request\' );\n        },\n        teardown: function() {\n            icAjax.request.restore();\n        }\n    });\n\n    function ajaxTestSuite(){\n        ok( requestSpy.calledOnce, \'request called once\' );\n        ok( response.then, \'response is a promise\' );\n        ok( Ember.PromiseProxyMixin.detect( response ), \'response is a promise proxy\' );\n    }\n\n    asyncTest( \'__find single model with id\', function(){\n\n        expect(6);\n        response = ajaxadapter.find( \'foo\', 1 );\n\n        equal( requestSpy.args[0][0].url, \'/foo\', \'should call icAjax.request with the correct arguments\');\n\n        equal( requestSpy.args[0][0].data.id, 1, \'should call icAjax.request with the correct arguments\');\n\n        ajaxTestSuite();\n\n        response.then( function(){\n            ok( response.get(\'content\') instanceof Foo, \'response is instance of Foo\' );\n            start();\n        });\n    });\n\n    asyncTest( \'__find single model with no id\', function(){\n        var options =  {data: {main: true }};\n\n        response = ajaxadapter.find( \'foo\', null, options, true );\n\n        equal( requestSpy.args[0][0].url, \'/foo\', \'should call icAjax.request with the correct arguments\');\n\n        ok( requestSpy.args[0][0].data.main, \'should call icAjax.request with the correct arguments\');\n\n        ajaxTestSuite();\n\n        response.then( function(){\n            ok( response.get(\'content\') instanceof Foo, \'response is instance of Foo\' );\n            start();\n        });\n\n    });\n\n    asyncTest( \'__find array of model\', function(){\n        var options =  {data: {main: true }};\n        //request\n        response = ajaxadapter.find( \'bar\', null, options, false );\n\n        ajaxTestSuite();\n\n        ok( response instanceof Ember.ArrayProxy, \'should return an instance of Ember.ArrayProxy\' );\n        response.then( function(){\n            ok( response.content[0] instanceof Bar, \'should return an array of Bar models\' );\n            ok( response.content[1] instanceof Bar, \'should return an array of Bar models\' );\n            start();\n        });\n    });\n\n\n    asyncTest( \'find should throw error if request fails\', function(){\n        var options = { endpoint: \'fail\' },\n            promise = ajaxadapter.find( \'foo\', null, options, false );\n\n        promise.then( function( result ){\n            ok( false, \'find did not throw an error!\' );\n            start();\n        },\n        function( result ){\n            equal( result.textStatus, \'error\', \'find did throw error\' );\n            start();\n        });\n    });\n\n    test( \'save\', function(){\n        var foo = Foo.create({ test: \'foo\', \'bar\': { id: 1, quiz: \'bar\' } });\n        response = ajaxadapter.save( \'/foo\', foo );\n        ok( requestSpy.calledOnce, \'should call icAjax request once\' );\n        equal( requestSpy.args[0][0].url, \'/foo\', \'should call icAjax with correct url\');\n        equal( requestSpy.args[0][0].type, \'POST\', \'should call icAjax with correct method\');\n        equal( typeof requestSpy.args[0][0].data, \'string\', \'icAjax should return a string\');\n    });\n\n    test( \'save, should call $.ajax with the correct arguments\', function(){\n        var foo = Foo.create({ test: \'foo\', \'bar\': { id: 1, quiz: \'bar\' } });\n        response = ajaxadapter.save( \'/foo\', foo );\n        ok( requestSpy.calledOnce, \'request called once\' );\n        equal( requestSpy.args[0][0].url, \'/foo\' );\n        equal( requestSpy.args[0][0].type, \'POST\' );\n        equal( typeof requestSpy.args[0][0].data, \'string\' );\n        ok( response.then, \'response is a promise\' );\n    });\n\n    test( \'delete, should call icAjax.request once\', function(){\n        var foo = Foo.create({ id: 1, test: \'foo\', \'bar\': { id: 1, quiz: \'bar\' } });\n        response = ajaxadapter.deleteRecord( \'/foo\', 1 );\n\n        ok( requestSpy.calledOnce );\n        equal( requestSpy.args[0][0].url, \'/foo\', \'should call icAjax with correct url\');\n        equal( requestSpy.args[0][0].type, \'DELETE\', \'should call icAjax with correct url\');\n        equal( typeof requestSpy.args[0][0].data, \'string\', \'icAjax should return a string\');\n        ok( response.then, \'response is a proxy\' );\n    });\n  });//# sourceURL=dummy/tests/unit/adapters/ajax-test.js");

;eval("define(\"dummy/tests/unit/adapters/localstorage-test\", \n  [\"ember\",\"ember-qunit\",\"sl-ember-store/model\",\"sl-ember-store/adapter\",\"sl-ember-store/store\",\"sl-ember-store/adapters/localstorage\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var test = __dependency2__.test;\n    var moduleFor = __dependency2__.moduleFor;\n    var Model = __dependency3__[\"default\"];\n    var Adapter = __dependency4__[\"default\"];\n    var Store = __dependency5__[\"default\"];\n    var LocalStorageAdapter = __dependency6__[\"default\"];\n\n    var localstorageadapter,\n        localStorageBackup,\n        localStorage,\n        container,\n        getLocalStorageSpy,\n        requestSpy,\n        saveSpy,\n        response,\n        Foo = Model.extend(),\n        Bar = Model.extend();\n\n    module( \'Unit - sl-ember-store/adapter/localstorage\', {\n        setup: function() {\n           localStorage = {\n                _ns: \'testLSObject\',\n                setItem: function( item, content ){\n                    this[item] = content;\n                },\n                getItem: function( item ){\n                    return this[item];\n                }\n            };\n            container = {\n                registry: [],\n                cache: {},\n                normalize: function( key ){\n                    return key;\n                },\n                lookup: function( key ){\n                    if( this.cache[key] ) return this.cache[key];\n\n                    var obj = this.registry.findBy( \'key\', key ).factory.create({container:this});\n                    this.cache[key] = obj;\n                    return obj;\n                },\n                lookupFactory: function( key ){\n                    var item = this.registry.findBy( \'key\', key );\n                    return item ? item.factory : undefined;\n                }\n            };\n            localstorageadapter = LocalStorageAdapter.create({\n                container: container,\n                store: Store.create({ container:container })\n            });\n\n            //register mock data\n            localstorageadapter.container.cache[\'store:main\']={\n                runPostQueryHooks: sinon.spy(),\n                runPreQueryHooks: sinon.spy()\n            };\n\n            Foo.reopenClass( { url: \'/foo\', adapter: \'localstorage\' } );\n            Bar.reopenClass( { url: \'/bar\', adapter: \'localstorage\' } );\n\n            localstorageadapter.container.registry.push( { key: \'model:foo\', factory: Foo } );\n            localstorageadapter.container.registry.push( { key: \'model:bar\', factory: Bar } );\n\n            getLocalStorageSpy = sinon.stub( localstorageadapter, \'_getLocalStorage\', function(){\n                return localStorage;\n            });\n\n            localstorageadapter.save( \'/foo\',  {id: 1, test: \'foo\', \'bar\': { id: 1, quiz: \'bar\' } } );\n            localstorageadapter.save( \'/bar\', { id: 1, quiz: \'bar\' } );\n            localstorageadapter.save( \'/bar\', { id: 2, quiz: \'bar2\' } );\n\n        //spies\n            requestSpy = sinon.spy( localStorage, \'getItem\' );\n            saveSpy = sinon.spy( localStorage, \'setItem\' );\n\n        },\n        teardown: function() {\n            localStorage.getItem.restore();\n            localStorage.setItem.restore();\n            getLocalStorageSpy.restore();\n        }\n    });\n\n    asyncTest( \'__find single model with id\', function(){\n        response = localstorageadapter.find( \'foo\', 1, { label: \'1\' } );\n        equal(requestSpy.args[0][0], \'sl-ember-store\', \'calls request with correct args\' );\n        ok( response.then, \'response is a promise\' );\n        ok( Ember.PromiseProxyMixin.detect( response ), \'response is a promise\' );\n        response.then(function( result ){\n            ok( response.get( \'content\' ) instanceof Foo, \'response content is instace of Foo\' );\n            start();\n        });\n    });\n\n    asyncTest( \'__find single model with no id\', function(){\n        var options =  {data: {main: true }};\n\n        response = localstorageadapter.find( \'foo\', null, options, true );\n\n        equal(requestSpy.args[0][0], \'sl-ember-store\', \'calls request with correct args\' );\n\n        ok( response.then, \'response is a promise\' );\n\n        ok( Ember.PromiseProxyMixin.detect( response ), \'response is a promise\' );\n\n        response.then(function(){\n            ok( response.get( \'content\' ) instanceof Foo, \'response content is instace of Foo\' );\n            start();\n        });\n\n    });\n\n    asyncTest( \'__find array of models\', function(){\n        var options =  {data: {main: true }};\n\n        response = localstorageadapter.find( \'bar\', null, options, false );\n\n        ok( Ember.PromiseProxyMixin.detect( response ), \'response is a promise\' );\n\n        response.then(function(){\n            ok( response.get( \'content.0\' ) instanceof Bar, \'response content is instace of Bar\' );\n            ok( response.get( \'content.1\' ) instanceof Bar, \'response content is instace of Bar\' );\n            start();\n        });\n    });\n\n    asyncTest( \'save\', function(){\n        var fooContent = { id: 2, test: \'foo\', \'bar\': { id: 1, quiz: \'bar2\' } },\n            foo = Foo.create( fooContent );\n\n        response = localstorageadapter.save( \'/foo\', foo );\n        response.then( function(){\n            var fooRecords = JSON.parse(localStorage.getItem(\'sl-ember-store\')).foo,\n                fooRecord = fooRecords.findBy( \'id\', 2 );\n\n            ok( response.then, \'response is a promise\' );\n\n            equal( fooRecord.id, 2, \'should have added the record to the mock ls object\' );\n            start();\n        });\n    });\n\n    asyncTest( \'delete\', function(){\n        var fooContent = { id: 2, test: \'foo\', \'bar\': { id: 1, quiz: \'bar2\' } },\n            foo = Foo.create( fooContent ),\n            r = localstorageadapter.save( \'/foo\', foo );\n\n            r.then( function(){\n\n                var response = localstorageadapter.deleteRecord( \'/foo\', 2 );\n\n                response.then( function(){\n                    ok( response.then, \'response is a promise\' );\n\n                    var fooRecords = [ JSON.parse(localStorage.getItem(\'sl-ember-store\')).foo ],\n                        fooRecord = fooRecords.findBy( \'id\', 2 );\n\n                    equal( fooRecord, undefined, \'should have deleted the record to the mock ls object\' );\n                    start();\n                });\n            });\n    });\n\n    asyncTest( \'quota test\', function(){\n        var fooContent = { id: 1, test: [] },\n            foo,\n            r;\n\n        for( var i = 0; i < 10000000; i++){\n            fooContent.test[i] = \'01000001000000000100010\';\n        }\n\n        //make sure we actually test the browser\'s localstorage\n        getLocalStorageSpy.restore();\n\n        foo = Foo.create( fooContent );\n\n        r = localstorageadapter.save( \'/foo\', foo );\n\n        r.then(\n            function( result ){\n                ok( false, \'Promise did not get rejected!\');\n                start();\n            },\n            function( result ){\n                equal( result.textStatus, \'error\', \'Promise gets rejected for exceeding quota\' );\n                start();\n            });\n    });\n  });//# sourceURL=dummy/tests/unit/adapters/localstorage-test.js");

;eval("define(\"dummy/tests/unit/cache-test\", \n  [\"ember\",\"ember-qunit\",\"sl-ember-store/cache\"],\n  function(__dependency1__, __dependency2__, __dependency3__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var test = __dependency2__.test;\n    var moduleFor = __dependency2__.moduleFor;\n    var Cache = __dependency3__[\"default\"];\n\n    var cache,\n        fetchByIdSpy,\n        fetchOneSpy,\n        _getAllPromiseSpy,\n        _getRecordSpy;\n\n    module( \'Unit - sl-ember-store/cache\', {\n        setup: function(){\n            cache = Cache.create();\n            fetchByIdSpy = sinon.spy( cache, \'fetchById\' );\n            fetchOneSpy = sinon.spy( cache, \'fetchOne\' );\n            _getAllPromiseSpy = sinon.spy( cache, \'_getAllPromise\' );\n            _getRecordSpy = sinon.spy( cache, \'_getRecords\' );\n        },\n        teardown: function(){\n            fetchByIdSpy.restore();\n            fetchOneSpy.restore();\n            _getAllPromiseSpy.restore();\n            _getRecordSpy.restore();\n        }\n    });\n\n    test( \'isCached, id\', function(){\n        cache.isCached( \'test\', 1 );\n        ok( fetchByIdSpy.calledOnce, \'fetch by id called once\' );\n        equal( fetchByIdSpy.args[0][1], 1, \'fetch by the right id\' );\n    });\n    test( \'isCached, one\', function(){\n        cache.isCached( \'test\', null, true );\n        ok( fetchOneSpy.calledOnce, \'fetch one called once\' );\n        equal( fetchOneSpy.args[0][0], \'test\', \'fetch one called with correct type\' );\n    });\n    test( \'isCached, all\', function(){\n        cache.isCached( \'test\' );\n        ok( _getAllPromiseSpy.calledOnce, \'get all called once\');\n        equal( _getAllPromiseSpy.args[0][0], \'test\', \'get all called with correct type\' );\n        ok( _getRecordSpy.calledOnce, \'get all called once\');\n        equal( _getRecordSpy.args[0][0], \'test\', \'get all called with correct type\' );\n    });\n\n    test( \'clearCache\', function(){\n        sinon.spy( cache, \'_initializeRecords\' );\n        sinon.spy( cache, \'_initializePromises\' );\n        cache.clearCache( \'test\' );\n        ok( cache._initializeRecords.calledOnce, \'initialize records called once\');\n        ok( cache._initializeRecords.calledWith( \'test\' ), \'initialize records called with correct arg\' );\n        ok( cache._initializePromises.calledOnce, \'initialize promises called once\');\n        ok( cache._initializePromises.calledWith( \'test\' ), \'initialize records called with correct arg\' );\n    });\n\n    test( \'removeRecord\', function(){\n        cache.removeRecord( \'test\', Ember.Object.create() );\n        ok( cache._getRecords.calledOnce, \'_getRecords called once\' );\n        ok( cache._getRecords.calledWith( \'test\' ), \'_getRecords called with correct arg\');\n    });\n\n    test( \'removeRecords\', function(){\n        sinon.spy( cache, \'removeRecord\' );\n        cache.removeRecords( \'test\', [ Ember.Object.create() ] );\n        ok( cache.removeRecord.calledOnce, \'removeRecord called once\' );\n        ok( cache.removeRecord.calledWith( \'test\' ), \'removeRecord called with correct arg\' );\n    });\n\n    test( \'addToCache, single promise\', function(){\n        var result =  new Ember.RSVP.Promise(function( resolve ){ resolve( Ember.Object.create() ); });\n        sinon.spy( cache, \'addPromise\');\n        cache.addToCache( \'test\', 1, false, result );\n        ok( cache.addPromise.calledOnce, \'addPromise called once\' );\n        ok( cache.addPromise.calledWith( \'test\' ), \'addPromise called with correct args\' );\n    });\n\n    test( \'addToCache, all promise\', function(){\n        var result =  new Ember.RSVP.Promise(function( resolve ){ resolve( [ Ember.Object.create() ] ); });\n        sinon.spy( cache, \'addAllPromise\');\n        cache.addToCache( \'test\', false, false, result );\n        ok( cache.addAllPromise.calledOnce, \'addAllPromise called once\' );\n        ok( cache.addAllPromise.calledWith( \'test\' ), \'addAllPromise called with correct args\' );\n    });\n\n    test( \'addToCache, record\', function(){\n        sinon.spy( cache, \'addRecord\');\n        cache.addToCache( \'test\', 1, false, Ember.Object.create() );\n        ok( cache.addRecord.calledOnce, \'addRecord called once\' );\n        ok( cache.addRecord.calledWith( \'test\' ), \'addRecord called with correct args\' );\n    });\n\n    asyncTest( \'addPromise, resolve\', function(){\n        var testRecord =  Ember.Object.create({ id: 1, test: \'test\' }),\n            testPromise = new Ember.RSVP.Promise( function( resolve ){\n               setTimeout( resolve( testRecord ), 1000);\n            }),\n            rPromise;\n\n        sinon.spy( cache, \'_getPromises\' );\n\n        rPromise = cache.addPromise( \'test\', 1, testPromise );\n        ok( cache._getPromises.calledOnce, \'_getPromises called once\' );\n        equal( cache.get( \'_promises.test.ids.1\' ), testPromise, \'promise got added to promise cache\' );\n\n        //test that promise gets removed from promise hash on resolution\n        rPromise.finally( function(){\n            equal( cache.get( \'_promises.test.ids.1\' ), undefined, \'promise was removed from cache\' );\n            ok( cache._getRecords.calledOnce, \'_getRecords called once\' );\n            equal( cache.get( \'_records.test.ids.1\' ), testRecord, \'record was added to record cache\' );\n            start();\n        });\n\n    });\n    asyncTest( \'addPromise, reject\', function(){\n        var testRecord =  Ember.Object.create({ id: 1, test: \'test\' }),\n            testPromise = new Ember.RSVP.Promise( function( resolve, reject ){\n               setTimeout( reject( testRecord ), 1000);\n            }),\n            rPromise;\n\n        sinon.spy( cache, \'_getPromises\' );\n\n        rPromise = cache.addPromise( \'test\', 1, testPromise );\n        ok( cache._getPromises.calledOnce, \'_getPromises called once\' );\n        equal( cache.get( \'_promises.test.ids.1\' ), testPromise, \'promise got added to promise cache\' );\n\n        //test that promise gets removed from promise hash on resolution\n        rPromise.finally( function(){\n            equal( cache.get( \'_promises.test.ids.1\' ), undefined, \'promise was removed from cache\' );\n            ok( !cache._getRecords.called, \'_getRecords not called\' );\n            equal( cache.get( \'_records.test.ids.1\' ), undefined, \'record was not added to record cache\' );\n            start();\n        });\n\n    });\n\n\n    asyncTest( \'addAllPromise, resolve\', function(){\n        var testRecord =  Ember.Object.create({ id: 1, test: \'test\' }),\n            testPromise = new Ember.RSVP.Promise( function( resolve ){\n               setTimeout( resolve( [ testRecord ]  ), 100);\n            }),\n            rPromise;\n\n        sinon.spy( cache, \'_getPromises\' );\n        sinon.spy( cache, \'addRecords\' );\n\n        rPromise = cache.addAllPromise( \'test\', testPromise );\n        ok( cache._getPromises.calledOnce, \'_getPromises called once\' );\n        equal( cache.get( \'_promises.test.all\' ), testPromise, \'promise was added to promise cache\' );\n        rPromise.then( function(){\n            equal( cache.get( \'_promises.test.all\' ), undefined, \'promise was removed from promise cache\' );\n            ok( cache.addRecords.calledOnce, \'addrecords called once\' );\n            equal( cache.get( \'_records.test.ids.1\'), testRecord, \'record was added to record cache\' );\n            start();\n        });\n    });\n\n    asyncTest( \'addAllPromise, reject\', function(){\n        var testRecord =  Ember.Object.create({ id: 1, test: \'test\' }),\n            testPromise = new Ember.RSVP.Promise( function( resolve, reject ){\n               setTimeout( reject( [ testRecord ]  ), 100);\n            }),\n            rPromise;\n\n        sinon.spy( cache, \'_getPromises\' );\n        sinon.spy( cache, \'addRecords\' );\n\n        rPromise = cache.addAllPromise( \'test\', testPromise );\n        ok( cache._getPromises.calledOnce, \'_getPromises called once\' );\n        equal( cache.get( \'_promises.test.all\' ), testPromise, \'promise was added to promise cache\' );\n        rPromise.finally( function(){\n            equal( cache.get( \'_promises.test.all\' ), undefined, \'promise was removed from promise cache\' );\n            ok( !cache.addRecords.calledOnce, \'addrecords not called once\' );\n            equal( cache.get( \'_records.test.ids.1\'), undefined, \'record was added to record cache\' );\n            start();\n        });\n    });\n\n    test( \'addRecord\', function(){\n        var testRecord =  Ember.Object.create({ id: 1, test: \'test\' });\n        var testRecord2 =  Ember.Object.create({ id: 1, test: \'test2\' });\n\n        sinon.spy( cache, \'removeRecord\' );\n\n        cache.addRecord( \'test\', testRecord );\n\n        equal( cache.get( \'_records.test.ids.1\' ), testRecord, \'testRecord added to record cache\' );\n\n        ok( ! cache.removeRecord.called, \'removeRecord was not called on initial add\');\n\n        cache.addRecord( \'test\', testRecord2 );\n\n        ok( cache.removeRecord.called, \'removeRecord was called on 2nd add\');\n\n        equal( cache.get( \'_records.test.ids.1\' ), testRecord2, \'testRecord2 replaced old record in cache\' );\n    });\n\n    test( \'addRecords\', function(){\n        var testRecord =  Ember.Object.create({ id: 1, test: \'test\' });\n        var testRecord2 =  Ember.Object.create({ id: 2, test: \'test2\' });\n\n        sinon.spy( cache, \'addRecord\' );\n\n        cache.addRecords( \'test\', [ testRecord, testRecord2 ] );\n\n        equal( cache.addRecord.callCount, 2, \'addRecord called for each record\' );\n\n    });\n\n    test( \'fetch, id\', function(){\n        cache.fetch( \'test\', 1 );\n        ok( fetchByIdSpy.calledOnce, \'fetch by id called once\' );\n        equal( fetchByIdSpy.args[0][1], 1, \'fetch by the right id\' );\n    });\n    test( \'fetch, one\', function(){\n        cache.fetch( \'test\', null, true );\n        ok( fetchOneSpy.calledOnce, \'fetch one called once\' );\n        equal( fetchOneSpy.args[0][0], \'test\', \'fetch one called with correct type\' );\n    });\n    test( \'fetch, all\', function(){\n        cache.fetch( \'test\' );\n        ok( _getAllPromiseSpy.calledOnce, \'get all called once\');\n        equal( _getAllPromiseSpy.args[0][0], \'test\', \'get all called with correct type\' );\n        ok( _getRecordSpy.calledOnce, \'get all called once\');\n        equal( _getRecordSpy.args[0][0], \'test\', \'get all called with correct type\' );\n    });\n\n\n    asyncTest( \'fetchOne - promise\', function(){\n        var testRecord = Ember.Object.create({ id: 1});\n\n        cache.addPromise( \'test\', 1, Ember.RSVP.Promise.resolve( testRecord ) )\n        .then( function(){\n\n            sinon.spy( cache, \'_getPromises\' );\n\n            var response = cache.fetchOne( \'test\' );\n\n            ok( cache._getPromises.calledOnce, \'getPromise called once\' );\n\n            response.then( function(){\n                equal( response.get(\'content\'), testRecord, \'fetchOne returned correct record\' );\n\n                start();\n            });\n        });\n\n    });\n\n    asyncTest( \'fetchOne - record\', function(){\n        var testRecord = Ember.Object.create({ id: 1});\n\n        cache.addRecord( \'test\', testRecord );\n\n        var response = cache.fetchOne( \'test\' );\n\n        ok( cache._getRecords.called, \'getRecords called once\' );\n\n        response.then( function(){\n            equal( response.get(\'content\'), testRecord, \'fetchOne returned the correct record\' );\n            start();\n        });\n    });\n\n\n    asyncTest( \'fetchById - promise\', function(){\n        var testRecord = Ember.Object.create({ id: 1});\n\n        cache.addPromise( \'test\', 1, Ember.RSVP.Promise.resolve( testRecord ) )\n        .then( function(){\n\n            sinon.spy( cache, \'_getPromiseById\' );\n\n            var response = cache.fetchById( \'test\', 1 );\n\n            ok( cache._getPromiseById.calledOnce, \'getPromiseById called once\' );\n\n            response.then( function(){\n                equal( response.get(\'content\'), testRecord, \'fetchById returned correct record\' );\n\n                start();\n            });\n        });\n\n    });\n\n    asyncTest( \'fetchById - record\', function(){\n        var testRecord = Ember.Object.create({ id: 1});\n\n        cache.addRecord( \'test\', testRecord );\n\n        sinon.spy( cache, \'_getRecordById\' );\n\n        var response = cache.fetchById( \'test\', 1 );\n\n        ok( cache._getRecordById.calledOnce, \'getRecordById called once\' );\n\n        response.then( function(){\n            equal( response.get(\'content\'), testRecord, \'fetchById returned correct record\' );\n\n            start();\n        });\n\n    });\n\n    test( \'fetchAll - promise\', function(){\n\n        var testRecord = Ember.Object.create({ id: 1});\n        var testPromise =  Ember.RSVP.Promise.resolve( [ testRecord] );\n\n        cache.addAllPromise( \'test\', testPromise);\n        var response = cache.fetchAll( \'test\', testPromise );\n        ok( cache._getAllPromise.calledOnce, \'calls _getAllPromise once\' );\n        equal( response, testPromise, \'returns the test promise\' );\n    });\n\n    asyncTest( \'fetchAll - record\', function(){\n\n        var testRecord = Ember.Object.create({ id: 1});\n        cache.addRecords( \'test\', [ testRecord ] );\n        var response = cache.fetchAll( \'test\' );\n        ok( cache._getRecords.called, \'calls _getAllRecordsCached once\' );\n        response.then( function(){\n            equal( response.get( \'content.0\' ), testRecord, \'returns the test record in an array\' );\n            start();\n        });\n\n    });\n\n    test( \'_setupCache\', function(){\n        cache._setupCache();\n        equal( Object.keys( cache._records ).length, 0, \'records object is empty\' );\n        equal( Object.keys( cache._promises ).length, 0, \'promises object is empty\' );\n    });\n\n    test( \'_initializeRecords\', function(){\n        cache._initializeRecords( \'test\' );\n        equal( cache._records.test.records.length, 0, \'sets up `test` records array\' );\n        ok( cache._records.test.ids instanceof Ember.Object, \'sets up `test` records object\' );\n    });\n\n    test( \'_getRecords, none\', function(){\n        var response = cache._getRecords( \'test\' );\n        equal( response.records.length, 0, \'returns 0 records\');\n    });\n\n    test( \'_getRecords, some\', function(){\n        cache.addRecord( \'test\', Ember.Object.create({id:1}));\n        var response = cache._getRecords( \'test\' );\n        equal( response.records[0].id, 1, \'returns an array with the test record\' );\n    });\n\n    test( \'_getRecordById, not found\', function(){\n        var response = cache._getRecordById( \'test\', 12 );\n        equal( response, undefined, \'record should not be found\');\n    });\n\n    test( \'_getRecordById, found\', function(){\n        var testRecord = Ember.Object.create({id:1});\n        cache.addRecord( \'test\', testRecord);\n        var response = cache._getRecordById( \'test\', 1 );\n        equal( response, testRecord, \'returns the correct record\' );\n    });\n\n    test( \'_getRecords, empty\', function(){\n        var response = cache._getRecords( \'test\' ).records;\n        equal( response.length, 0,  \'returns an empty array\' );\n    });\n\n    test( \'_getRecords, some\', function(){\n        var testRecord = Ember.Object.create({id:1});\n        cache.addRecord( \'test\', testRecord);\n        var response = cache._getRecords( \'test\' ).records;\n        equal( response[0], testRecord, \'returns the test record in an array\' );\n    });\n\n    test( \'_initializePromises\', function(){\n        cache._initializePromises( \'test\' );\n        equal( cache._promises.test.all, null, \'test all promise is null \');\n        equal( Object.keys(cache._promises.test.ids).length, 0, \'test promise object is empty\' );\n    });\n\n    test( \'_getPromises, empty\', function(){\n        sinon.spy( cache, \'_initializePromises\' );\n        var response = cache._getPromises(\'test\');\n        ok( cache._initializePromises.calledOnce, \'calls initializePromises\' );\n\n    });\n\n    test( \'_getPromises, some\', function(){\n        var testPromise = Ember.RSVP.Promise.resolve( Ember.Object.create({id:1}) );\n        cache.addPromise( \'test\', 1, testPromise );\n        var response = cache._getPromises( \'test\' );\n        equal( response.ids[1], testPromise, \'has testpromise set\' );\n    });\n\n    test( \'_getPromiseById, none\', function(){\n        var response = cache._getPromiseById( \'test\', 1 );\n        equal( response, undefined, \'no promise should be found\' );\n    });\n    test( \'_getPromiseById, some\', function(){\n        var testPromise = Ember.RSVP.Promise.resolve( Ember.Object.create({id:1}));\n        cache.addPromise( \'test\', 1, testPromise );\n        var response = cache._getPromiseById( \'test\', 1 );\n        equal( response, testPromise, \'promise should be found\' );\n    });\n\n    test( \'_getAllPromise, none\', function(){\n        var response = cache._getAllPromise( \'test\' );\n        equal( response, undefined, \'response should be undefined\' );\n    });\n    test( \'_getAllPromise, some\', function(){\n        var testRecord = Ember.Object.create({id:1}),\n            testPromise = Ember.RSVP.Promise.resolve( [ testRecord ] );\n\n        cache.addAllPromise( \'test\', testPromise );\n\n        var response = cache._getAllPromise( \'test\' );\n\n        equal( testPromise, response, \'should return promise\' );\n    });\n  });//# sourceURL=dummy/tests/unit/cache-test.js");

;eval("define(\"dummy/tests/unit/initializers/sl-ember-model-test\", \n  [\"ember\",\"ember-qunit\",\"dummy/tests/helpers/start-app\",\"sl-ember-store/store\",\"sl-ember-store/adapters/ajax\",\"sl-ember-store/adapters/localstorage\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var test = __dependency2__.test;\n    var moduleForComponent = __dependency2__.moduleForComponent;\n    var startApp = __dependency3__[\"default\"];\n    var Store = __dependency4__[\"default\"];\n    var AjaxAdapter = __dependency5__[\"default\"];\n    var LocalstorageAdapter = __dependency6__[\"default\"];\n\n    var App,\n        container;\n\n    module( \'Unit - initializer: sl-ember-store\', {\n        setup: function() {\n            App = startApp();\n            container = App.__container__;\n        },\n\n        teardown: function() {\n            Ember.run( App, App.destroy );\n        }\n    });\n\n    test( \'LocalStorage adapter gets namespace set\', function(){\n        var lsAdapter = container.lookupFactory( \'adapter:localstorage\' );\n        equal( lsAdapter.namespace, container.lookup( \'application:main\' ).get( \'modulePrefix\' ) );\n    });\n\n    test( \'store:main gets registered\', function(){\n        var store = container.lookupFactory( \'store:main\' );\n        ok( Store.detect( store ) );\n    });\n\n    test( \'adapter:ajax gets registered\', function(){\n        var ajaxAdapter = container.lookupFactory( \'adapter:ajax\' );\n        ok( AjaxAdapter.detect( ajaxAdapter ) );\n    });\n\n    test( \'adapter:localstorage gets registered\', function(){\n        var lsAdapter = container.lookupFactory( \'adapter:localstorage\' );\n        ok( LocalstorageAdapter.detect( lsAdapter ) );\n    });\n\n    test( \'store gets injected into controllers, routes, adapters\', function(){\n        var appRoute = container.lookup( \'route:application\' ),\n            appController,\n            ajaxAdapter = container.lookup( \'adapter:ajax\' ),\n            store = container.lookup( \'store:main\' );\n\n        expect( 3 );\n\n        equal( appRoute.get( \'store\' ), store );\n        equal( ajaxAdapter.get( \'store\' ), store );\n\n        visit( \'/\' ).then(function() {\n            appController = container.lookup( \'controller:application\' );\n            equal( appController.get( \'store\' ), store );\n        });\n    });\n  });//# sourceURL=dummy/tests/unit/initializers/sl-ember-model-test.js");

;eval("define(\"dummy/tests/unit/model-test\", \n  [\"ember\",\"ember-qunit\",\"dummy/models/foo\",\"dummy/models/bar\",\"sl-ember-store/model\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var test = __dependency2__.test;\n    var moduleFor = __dependency2__.moduleFor;\n    var Foo = __dependency3__[\"default\"];\n    var Bar = __dependency4__[\"default\"];\n    var Model = __dependency5__[\"default\"];\n\n    var foo,\n        bar,\n        adapter,\n        container,\n        fooResponse   = { id: 1, test: \'true\' },\n        ajaxMock      = function() {\n            return new Ember.RSVP.Promise( function(resolve) { resolve( fooResponse ); });\n        },\n        serRespons1   = { test: true },\n        serResponse2  = { test: false },\n        serializer1   = function( response, store ){ return response; },\n        serializer2   = function( response, store ){ return response; },\n        testResponse1 = { test:true },\n        testResponse2 = { test: false },\n        TestModel     = Model.extend({});\n        TestModel.reopenClass({\n            serializer: function( response, store ){\n                return testResponse1;\n            },\n            endpoints: {\n                test: {\n                    get: {\n                        serializer: function( response, store ){\n                            return testResponse2;\n                        }\n                    }\n                }\n            }\n        });\n\n    module( \'Unit - sl-ember-store/model\', {\n        setup: function() {\n\n            Foo.reopenClass({\n                url       :\'/foo\',\n                endpoints : {\n                    doo: {\n                        url: \'/doo\'\n                    },\n                    goo: {\n                        serializer: serializer1,\n                        post: {\n                            url: \'/goo\',\n                            serializer: serializer2\n                        }\n                    }\n                }\n            });\n\n            Bar.reopenClass({\n                url       : \'/bar\',\n                endpoints : {\n                    default: {\n                            post: \'/barUpdate\',\n                            delete: \'/barDelete\',\n                            serializer: serializer1\n                    },\n                    car: {\n                        post: {\n                            url: \'/carUpdate\',\n                            serializer: serializer2,\n                        },\n                        delete: \'/carDelete\'\n                    }\n                }\n            });\n\n            adapter = {\n                save         : ajaxMock,\n                deleteRecord : ajaxMock,\n            };\n\n            sinon.spy( adapter, \'save\' );\n            sinon.spy( adapter, \'deleteRecord\' );\n\n            container = {\n                registry: [],\n                cache: {},\n                normalize: function( key ) {\n                    return key;\n                },\n                lookup: function( key ) {\n                    if ( this.cache[key] ) return this.cache[key];\n\n                    var obj = this.registry.findBy( \'key\', key ).factory.create({container:this});\n                    this.cache[key] = obj;\n                    return obj;\n                },\n                lookupFactory: function( key ){\n                    var item = this.registry.findBy( \'key\', key );\n                    return item ? item.factory : undefined;\n                }\n            };\n\n            container.cache[\'adapter:ajax\'] = adapter;\n\n            foo = Foo.create({\n                content: {\n                    test: \'foo\',\n                    \'bar\': { id: 1, quiz: \'bar\' },\n                },\n                container: container\n            });\n\n\n            bar = Bar.create({\n                content: {\n                    test: \'bar\',\n                    \'car\': { id: 1, quiz: \'car\' },\n                },\n                container: container\n            });\n        },\n        teardown: function() {\n            adapter.save.reset();\n            adapter.deleteRecord.reset();\n            foo = Foo.create({\n                content: {\n                    test: \'foo\',\n                    \'bar\': { id: 1, quiz: \'bar\' },\n                },\n                container: container\n            });\n            bar = Bar.create({\n                content: {\n                    test: \'bar\',\n                    \'car\': { id: 1, quiz: \'car\' },\n                },\n                container: container\n            });\n        }\n    });\n\n    test( \'getUrlForEndpointAction:should return /bar for ( null, `get` )\', function() {\n        equal( Bar.getUrlForEndpointAction( null, \'get\' ), \'/bar\' );\n    });\n\n    test( \'getUrlForEndpointAction:should return /barUpdate for ( null, `post` )\', function() {\n        equal( Bar.getUrlForEndpointAction( null, \'post\' ), \'/barUpdate\' );\n    });\n\n    test( \'getUrlForEndpointAction:should return /barDelete for ( null, `delete` )\', function() {\n        equal( Bar.getUrlForEndpointAction( null, \'delete\' ), \'/barDelete\' );\n    });\n\n    test( \'getUrlForEndpointAction:should return /bar for ( `default`, `get` )\', function() {\n        equal( Bar.getUrlForEndpointAction( \'default\', \'get\' ), \'/bar\' );\n    });\n\n    test( \'getUrlForEndpointAction:should return /barUpdate for ( `default`, `post` )\', function() {\n        equal( Bar.getUrlForEndpointAction( \'default\', \'post\' ), \'/barUpdate\' );\n    });\n\n    test( \'getUrlForEndpointAction:should return /barDelete for ( `default`, `delete` )\', function() {\n        equal( Bar.getUrlForEndpointAction( \'default\', \'delete\' ), \'/barDelete\' );\n    });\n\n    test( \'getUrlForEndpointAction:should return /bar for ( `car`, `get` )\', function() {\n        equal( Bar.getUrlForEndpointAction( \'car\', \'get\' ), \'/bar\' );\n    });\n\n    test( \'getUrlForEndpointAction:should return /carUpdate for ( `car`, `post` )\', function() {\n        equal( Bar.getUrlForEndpointAction( \'car\', \'post\' ), \'/carUpdate\' );\n    });\n\n    test( \'getUrlForEndpointAction:should return /carDelete for ( `car`, `delete` )\', function() {\n        equal( Bar.getUrlForEndpointAction( \'car\', \'delete\' ), \'/carDelete\' );\n    });\n\n    test( \'callSerializerForEndpointAction:should return testResponse1 for TestModel - ( `null`, `get` ) \', function() {\n        var testResponse = TestModel.callSerializerForEndpointAction( null, \'get\', {} );\n        equal( testResponse, testResponse1 );\n    });\n\n    test( \'callSerializerForEndpointAction:should return testResponse1 for TestModel - ( `test`, `get` ) \', function() {\n        var testResponse = TestModel.callSerializerForEndpointAction( \'test\', \'get\', {} );\n        equal( testResponse, testResponse2 );\n    });\n\n    test( \'save-default:should call adapter.save with correct arguments\', function() {\n        expect(2);\n        foo.save().then( function() {\n            equal( adapter.save.args[0][0], \'/foo\' );\n            equal( adapter.save.args[0][1].test, \'foo\' );\n        });\n    });\n\n    test( \'save-default:should update its content with fooResponse\', function() {\n        expect(1);\n        foo.save().then(function() {\n            deepEqual( foo.get(\'content\'), fooResponse );\n        });\n    });\n\n    test( \'save-endpoint:should call adapter.save with correct arguments\', function() {\n        expect(2);\n        bar.save().then( function() {\n            equal( adapter.save.args[0][0], \'/barUpdate\' );\n            equal( adapter.save.args[0][1].test, \'bar\' );\n        });\n    });\n    test( \'save-endpoint:should update its content with fooResponse\', function() {\n        expect(1);\n        bar.save().then( function() {\n            deepEqual( bar.get(\'content\'), fooResponse );\n        });\n    });\n\n    test( \'save-endpoint:car: should call adapter.save with correct arguments\', function() {\n        expect(2);\n        bar = Bar.create({\n            content: {\n                test: \'bar\',\n                \'car\': { id: 1, quiz: \'car\' },\n            },\n            container: container\n        });\n        bar.save({endpoint:\'car\'}).then( function() {\n            equal( adapter.save.args[0][0], \'/carUpdate\' );\n            equal( adapter.save.args[0][1].test, \'bar\' );\n        });\n    });\n\n    test( \'save-endpoint:car: should update its content with fooResponse\', function() {\n        bar = Bar.create({\n            content: {\n                test: \'bar\',\n                \'car\': { id: 1, quiz: \'car\' },\n            },\n            container: container\n        });\n        bar.save({endpoint:\'car\'}).then( function() {\n            deepEqual( bar.get(\'content\'), fooResponse );\n        });\n    });\n\n    test( \'delete: should call adapter.deleteRecord with correct arguments\', function() {\n        expect(1);\n        foo.deleteRecord().then( function() {\n            ok( adapter.deleteRecord.calledWith( \'/foo\' ) );\n        });\n    });\n\n    test( \'delete: should destroy foo\', function() {\n        expect(1);\n        foo.deleteRecord().then( function() {\n            ok( foo.isDestroyed );\n        });\n\n    });\n\n    test( \'delete-endpoint: should call adapter.delete with correct arguments\', function() {\n        expect(1);\n        bar.deleteRecord().then( function() {\n            ok( adapter.deleteRecord.calledWith( \'/barDelete\' ) );\n        });\n    });\n\n    test( \'delete-endpoint: should destroy bar\', function() {\n        expect(1);\n        bar.deleteRecord().then( function() {\n            ok( bar.isDestroyed );\n        });\n    });\n\n    test( \'delete-endpoint:car: should call adapter.delete with correct arguments\', function() {\n        expect(1);\n        bar.deleteRecord({endpoint:\'car\'}).then( function() {\n            ok( adapter.deleteRecord.calledWith( \'/carDelete\' ) );\n        });\n    });\n\n    test( \'delete-endpoint:car: should destroy bar\', function() {\n        expect(1);\n        bar.deleteRecord({endpoint:\'car\'}).then( function() {\n            ok( bar.isDestroyed );\n        });\n    });\n  });//# sourceURL=dummy/tests/unit/model-test.js");

;eval("define(\"dummy/tests/unit/store-test\", \n  [\"ember\",\"ember-qunit\",\"sl-ember-store/store\",\"sl-ember-store/model\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var test = __dependency2__.test;\n    var moduleFor = __dependency2__.moduleFor;\n    var Store = __dependency3__[\"default\"];\n    var Model = __dependency4__[\"default\"];\n\n    var Foo,\n        Bar,\n        store,\n        AjaxAdapter,\n        ajaxAdapter,\n        LocalstorageAdapter,\n        queryHook;\n\n    module( \'Unit - sl-ember-store/store\', {\n\n        setup: function() {\n            Foo = Model.extend();\n            Bar = Model.extend();\n            Bar.reopenClass({ adapter: \'localstorage\' });\n\n            AjaxAdapter = Ember.Object.extend({\n                type: \'ajax\',\n                __find: function(){},\n                find: function(){\n                    return Ember.RSVP.resolve( [ Ember.Object.create() ] );\n                }\n            });\n\n            LocalstorageAdapter = Ember.Object.extend({ type: \'localstorage\' });\n\n            store = Store.create({\n                container: {\n                    registry: [],\n                    cache: {},\n                    normalize: function( key ){\n                        return key;\n                    },\n                    lookup: function( key ){\n                        if( this.cache[key] ) return this.cache[key];\n\n                        var obj = this.registry.findBy( \'key\', key ).factory.create({container:this});\n                        this.cache[key] = obj;\n                        return obj;\n                    },\n                    lookupFactory: function( key ){\n                        return this.registry.findBy( \'key\', key ).factory;\n                    }\n                }\n            });\n            store.container.registry.push( { key: \'adapter:ajax\', factory: AjaxAdapter } );\n            store.container.registry.push( { key: \'adapter:localstorage\', factory: LocalstorageAdapter } );\n\n            store.container.registry.push( { key: \'model:foo\', factory: Foo } );\n            store.container.registry.push( { key: \'model:bar\', factory: Bar } );\n\n            ajaxAdapter = store.container.lookup(\'adapter:ajax\');\n\n\n            //sinon spies\n            sinon.spy( store, \'__find\' );\n            sinon.spy( store, \'modelFor\' );\n            sinon.spy( store, \'adapterFor\' );\n            sinon.spy( ajaxAdapter, \'find\' );\n            sinon.spy( Foo, \'create\' );\n            queryHook = sinon.spy();\n        },\n        teardown: function() {\n            store.__find.restore();\n            store.modelFor.restore();\n            store.adapterFor.restore();\n            ajaxAdapter.find.restore();\n            Foo.create.restore();\n            queryHook.reset();\n        }\n    });\n\n    test( \'modelFor: should return the model \"Foo\" for type \"foo\" \', function() {\n        ok( store.modelFor( \'foo\' ) === Foo );\n    });\n\n    test( \'modelFor: should return the model \"Bar\" for type \"bar\" \', function() {\n        ok( store.modelFor( \'bar\' ) === Bar );\n    });\n\n    test( \'adapterFor: should return the adapter ajax for model type foo\', function() {\n        ok( store.adapterFor( \'foo\' ) instanceof AjaxAdapter );\n    });\n\n    test( \'adapterFor: should return the adapter localstorage for model type bar\', function() {\n        ok( store.adapterFor( \'bar\' ) instanceof LocalstorageAdapter );\n    });\n\n    test( \'findOne: should call __find with correct args\', function() {\n        var options = { \"otherId\":1 },\n            args;\n\n        store.findOne( \'foo\', options );\n\n        ok( store.__find.calledWith( \'foo\', null, options, true ) );\n    });\n\n    test( \'find should call __find with numeric id\', function() {\n        var options = { \"otherId\": 1 };\n        store.find( \'foo\', 1, options );\n        ok( store.__find.calledWith( \'foo\', 1, options, false ) );\n    });\n\n    test( \'find should call __find with object for first param\', function() {\n        var options = { \"otherId\": 1 };\n        store.find( \'foo\', options );\n        ok( store.__find.calledWith( \'foo\', null, options, false ) );\n    });\n\n    test( \'find should call __find with only the type\', function() {\n        store.find( \'foo\' );\n        ok( store.__find.calledWith( \'foo\', null, null, false ) );\n    });\n\n    test( \'__find should have called modelFor\', function() {\n        store.__find( \'foo\', 1, {}, false );\n        ok( store.modelFor.calledWith( \'foo\' ) );\n    });\n\n    test( \'__find should have called adapterFor\', function() {\n        store.__find( \'foo\', 1, {}, false );\n        ok( store.adapterFor.calledWith( \'foo\' ) );\n    });\n\n    test( \'__find should have called AjaxAdapter.find\', function() {\n        store.__find( \'foo\', 1, {}, false );\n        ok( ajaxAdapter.find.calledWith( \'foo\', 1, {}, false ) );\n    });\n\n    test( \'createRecord should have called modelFor\', function() {\n        store.createRecord( \'foo\' );\n        ok( store.modelFor.calledWith( \'foo\' ) );\n    });\n\n    test( \'createRecord should have called Foo.create once\', function() {\n        store.createRecord( \'foo\' );\n        ok( Foo.create.calledOnce );\n    });\n\n    test( \'createRecord should have called Foo.create with an object container\', function() {\n        store.createRecord( \'foo\' );\n        ok( Foo.create.calledWith( { container: store.container } ) );\n    });\n\n    test( \'registerPreQueryHook should add an entry to preQueryHooks\', function() {\n        store.registerPreQueryHook( queryHook );\n        ok( store.get( \'preQueryHooks\' ).length === 1 );\n    });\n\n    test( \'runPreQueryHooks should run query hook once\', function() {\n        store.registerPostQueryHook( queryHook );\n        store.runPostQueryHooks();\n        ok( queryHook.calledOnce );\n    });\n  });//# sourceURL=dummy/tests/unit/store-test.js");

/* jshint ignore:start */

define('dummy/config/environment', ['ember'], function(Ember) {
  var prefix = 'dummy';
/* jshint ignore:start */

try {
  var metaName = prefix + '/config/environment';
  var rawConfig = Ember['default'].$('meta[name="' + metaName + '"]').attr('content');
  var config = JSON.parse(unescape(rawConfig));

  return { 'default': config };
}
catch(err) {
  throw new Error('Could not read config from meta tag with name "' + metaName + '".');
}

/* jshint ignore:end */



});

if (runningTests) {
  require("dummy/tests/test-helper");
} else {
  require("dummy/app")["default"].create({"LOG_ACTIVE_GENERATION":true,"LOG_VIEW_LOOKUPS":true});
}



/* jshint ignore:end */
